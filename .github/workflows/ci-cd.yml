name: CI/CD Pipeline - API Notificaciones

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job de calidad de c√≥digo y testing
  quality-and-test:
    name: Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black flake8 mypy
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff .
        
    - name: Run Flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Run MyPy (type checking)
      run: |
        mypy app/ --ignore-missing-imports
        
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job de seguridad
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety
        
    - name: Run safety check
      run: |
        safety check -r requirements.txt --output json > safety-report.json
        
    - name: Upload safety results
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: safety-report.json

  # Job de build y test de integraci√≥n
  build-and-integration:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create .env file for testing
      run: |
        echo "SMTP_HOST=smtp.gmail.com" > .env
        echo "SMTP_PORT=587" >> .env
        echo "SMTP_USER=test@example.com" >> .env
        echo "SMTP_PASS=test_password" >> .env
        echo "EMAIL_FROM=test@example.com" >> .env
        echo "WHATSAPP_TOKEN=test_token" >> .env
        echo "WHATSAPP_URL=https://api.whatsapp.com" >> .env
        echo "DEBUG=true" >> .env
        
    - name: Test FastAPI startup
      run: |
        python -c "
        from app.main import app
        print('FastAPI app imported successfully')
        print(f'App title: {app.title}')
        print(f'App version: {app.version}')
        "
        
    - name: Test configuration loading
      run: |
        python -c "
        from app.config import settings
        print('Configuration loaded successfully')
        print(f'App name: {settings.app_name}')
        print(f'App version: {settings.app_version}')
        "
        
    - name: Build Docker image (if Dockerfile exists)
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t api-notificaciones:test .
        else
          echo "No Dockerfile found, skipping Docker build"
        fi

  # Job de deployment (solo en main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-and-test, security, build-and-integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create deployment package
      run: |
        tar -czf deployment-package.tar.gz .
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        
    - name: Deploy to server (example)
      run: |
        echo "Deploying to production server..."
        echo "This step would typically include:"
        echo "- SSH to production server"
        echo "- Pull latest code"
        echo "- Restart services"
        echo "- Health checks"
        
    - name: Health check
      run: |
        echo "Running health checks..."
        echo "This step would typically include:"
        echo "- API endpoint health checks"
        echo "- Service status verification"
        echo "- Monitoring alerts setup"

  # Job de notificaci√≥n
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Deployment successful!"
        echo "API Notificaciones has been deployed to production"
        
    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs and fix the issues"
